plugins {
    id 'com.github.node-gradle.node' version '2.2.4'
    id 'eclipse'
    id 'jacoco'
    id 'java'
    id 'org.gretty' version '3.0.3'
    id 'war'
}

gretty {
    httpPort = 8080
    httpsPort = 8443
    servletContainer = 'tomcat9'
    scanInterval = 1
    integrationTestTask = 'integrationTest'
    httpsEnabled = true
    sslKeyStorePath = '../../docker/cert/sa1.p12'
    sslKeyStorePassword = "${System.env.KEYSTORE_PASSWORD}"
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/integrationTest/java'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest

repositories {
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    hamcrestDateVersion = '2.0.7'
    hamcrestLibraryVersion = '2.2'
    junitVersion = '4.13'
    jerseyVersion = '2.31'
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.0'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.20'
    implementation group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.7.7'
    implementation group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: "${jerseyVersion}"
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-server', version: "${jerseyVersion}"
    implementation group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: "${jerseyVersion}"
    implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: "${jerseyVersion}"
    integrationTestImplementation group: 'junit', name:'junit', version: "${junitVersion}"
    integrationTestImplementation group: 'org.exparity', name: 'hamcrest-date', version: "${hamcrestDateVersion}"
    integrationTestImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: "${hamcrestLibraryVersion}"
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    testImplementation group: 'junit', name:'junit', version: "${junitVersion}"
    testImplementation group: 'org.exparity', name: 'hamcrest-date', version: "${hamcrestDateVersion}"
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: "${hamcrestLibraryVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
}

node {
    download = false

    nodeModulesDir = file("${project.projectDir}/src/main/frontend")
}

task npmInstallDependencies(type: NpmTask) {
    description = "Install npm packages in frontend app"
    dependsOn 'npmSetup'
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = "${project.projectDir}/src/main/frontend"
    }
    args = ['install']
}

task npmBuild(type: NpmTask) {
    description = "Build npm frontend app"
    dependsOn 'npmInstallDependencies'
    execOverrides {
        it.workingDir = "${project.projectDir}/src/main/frontend"
    }
    args = ['run', 'build']
}

task copyFrontendToInplaceWebapp(type: Copy) {
    description = "Copy compiled frontend app into inplace-webapp folder for use with gretty"
    dependsOn 'npmBuild'
    from "${project.projectDir}/src/main/frontend/build"
    into "${project.buildDir}/inplaceWebapp/web"
}

task copyFrontendToBuildDirectory(type: Copy) {
    description = "Copy compiled frontend app into subdirectory for deployment"
    dependsOn 'copyFrontendToInplaceWebapp'
    from "${project.projectDir}/src/main/frontend/build"
    into "${project.buildDir}/frontend/web"
}

processResources {
    dependsOn copyFrontendToBuildDirectory
}

war {
    from "${project.buildDir}/frontend"
}

clean.doFirst {
    delete "${project.projectDir}/src/main/frontend/build"
    delete "${project.projectDir}/src/main/frontend/node_modules"
}
